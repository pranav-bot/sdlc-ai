{
  "code_research_task": "```json\n{\n  \"similar_implementations\": [\n    {\n      \"name\": \"TodoMVC\",\n      \"description\": \"A collection of Todo applications in various JavaScript frameworks, showcasing different approaches to building task management apps.\",\n      \"link\": \"https://todomvc.com/\"\n    },\n    {\n      \"name\": \"TickTick\",\n      \"description\": \"A popular task management application with a web interface, offering features like task prioritization, collaboration, and reminders.\",\n      \"link\": \"https://ticktick.com/\"\n    },\n    {\n      \"name\": \"Any.do\",\n      \"description\": \"Another widely used task management application with a web and mobile presence, known for its simplicity and intuitive design.\",\n      \"link\": \"https://www.any.do/\"\n    },\n    {\n      \"name\": \"Trello\",\n      \"description\": \"A visual task management tool that uses Kanban boards to organize tasks and projects.  While not strictly a 'todo' app, its principles are relevant.\",\n      \"link\": \"https://trello.com/\"\n    },\n    {\n      \"name\": \"Asana\",\n      \"description\": \"A more robust project management tool with task management capabilities, suitable for larger teams and projects.\",\n      \"link\": \"https://asana.com/\"\n    },\n    {\n      \"name\": \"GitHub Issues\",\n      \"description\": \"While not a dedicated task manager, GitHub Issues provides a task management system integrated into version control, demonstrating a common pattern of integrating tasks into development workflows.\",\n      \"link\": \"https://github.com/features/issues\"\n    }\n  ],\n  \"code_patterns\": [\n    {\n      \"name\": \"Model-View-Controller (MVC) or Model-View-ViewModel (MVVM)\",\n      \"description\": \"Common architectural patterns for separating concerns and improving code organization.  MVC is more traditional, while MVVM is popular with JavaScript frameworks.\",\n      \"example\": \"Using a separate model for task data, a view for presentation, and a controller/viewmodel for handling user interactions.\"\n    },\n    {\n      \"name\": \"RESTful APIs\",\n      \"description\": \"Used for communication between the client-side (web browser) and the server-side (database and application logic).\",\n      \"example\": \"Using HTTP methods (GET, POST, PUT, DELETE) to manage tasks through API endpoints.\"\n    },\n    {\n      \"name\": \"Database interaction (e.g., using ORMs)\",\n      \"description\": \"Efficiently storing and retrieving task data from a database (e.g., PostgreSQL, MySQL, MongoDB). Object-Relational Mappers (ORMs) simplify database interactions.\",\n      \"example\": \"Using an ORM like SQLAlchemy (Python) or Sequelize (Node.js) to interact with the database.\"\n    },\n    {\n      \"name\": \"Asynchronous operations\",\n      \"description\": \"Handling user interactions and database operations asynchronously to prevent blocking the main thread and improve responsiveness.\",\n      \"example\": \"Using promises or async/await in JavaScript or asynchronous frameworks in other languages.\"\n    }\n  ],\n  \"best_practices\": [\n    \"Use a version control system (Git)\",\n    \"Write clean, well-documented code\",\n    \"Follow security best practices (e.g., input validation, authentication, authorization)\",\n    \"Implement unit and integration tests\",\n    \"Employ a CI/CD pipeline for automated build, testing, and deployment\",\n    \"Use a responsive design for cross-device compatibility\",\n    \"Prioritize accessibility for users with disabilities\"\n  ],\n  \"lessons_learned\": [\n    \"Prioritize user experience (UX) and user interface (UI) design\",\n    \"Start with a Minimum Viable Product (MVP) and iterate based on user feedback\",\n    \"Choose appropriate technologies based on project requirements and team expertise\",\n    \"Thorough testing is essential to prevent bugs and ensure reliability\",\n    \"Effective project management is crucial for successful development\"\n  ],\n  \"optimization_techniques\": [\n    {\n      \"name\": \"Database optimization\",\n      \"description\": \"Use appropriate indexing, query optimization, and database caching to improve database performance.\",\n      \"example\": \"Creating indexes on frequently queried columns in the database.\"\n    },\n    {\n      \"name\": \"Caching\",\n      \"description\": \"Cache frequently accessed data in memory (e.g., using Redis) to reduce database load.\",\n      \"example\": \"Caching frequently accessed task lists.\"\n    },\n    {\n      \"name\": \"Code optimization\",\n      \"description\": \"Write efficient code, minimize unnecessary calculations, and use appropriate data structures.\",\n      \"example\": \"Using efficient algorithms for sorting and searching tasks.\"\n    },\n    {\n      \"name\": \"Load balancing\",\n      \"description\": \"Distribute traffic across multiple servers to improve scalability and responsiveness.\",\n      \"example\": \"Using a load balancer to distribute requests to multiple application servers.\"\n    },\n    {\n      \"name\": \"Content Delivery Network (CDN)\",\n      \"description\": \"Use a CDN to serve static assets (e.g., images, CSS, JavaScript) from geographically distributed servers to reduce latency.\",\n      \"example\": \"Using a CDN to serve images and CSS files for faster loading times.\"\n    }\n  ]\n}\n```",
  "code_skeleton_task": "```json\n{\n  \"project_structure\": {\n    \"directories\": [\n      {\n        \"name\": \"api\",\n        \"description\": \"Backend API microservices\",\n        \"subdirectories\": [\n          \"authentication\",\n          \"tasks\",\n          \"notifications\",\n          \"search\",\n          \"analytics\",\n          \"recommendations\"\n        ]\n      },\n      {\n        \"name\": \"web\",\n        \"description\": \"Frontend web application\",\n        \"subdirectories\": [\n          \"src\",\n          \"public\"\n        ]\n      },\n      {\n        \"name\": \"database\",\n        \"description\": \"Database scripts and configurations\",\n        \"files\": [\n          \"schema.sql\"\n        ]\n      },\n      {\n        \"name\": \"shared\",\n        \"description\": \"Shared libraries and utilities\"\n      },\n      {\n        \"name\": \"config\",\n        \"description\": \"Configuration files\"\n      },\n      {\n        \"name\": \"tests\",\n        \"description\": \"Test suites\"\n      },\n      {\n        \"name\": \"docker\",\n        \"description\": \"Dockerfiles and Compose files\"\n      }\n    ]\n  },\n  \"core_modules\": [\n    {\n      \"name\": \"api/authentication\",\n      \"description\": \"Handles user authentication and authorization using JWT\",\n      \"technologies\": [\"Node.js\", \"Express.js\", \"jsonwebtoken\"],\n      \"endpoints\": [\n        {\n          \"method\": \"POST\",\n          \"path\": \"/register\",\n          \"description\": \"User registration\"\n        },\n        {\n          \"method\": \"POST\",\n          \"path\": \"/login\",\n          \"description\": \"User login\"\n        }\n      ]\n    },\n    {\n      \"name\": \"api/tasks\",\n      \"description\": \"Manages tasks and projects\",\n      \"technologies\": [\"Node.js\", \"Express.js\", \"Sequelize\"],\n      \"endpoints\": [\n        {\n          \"method\": \"GET\",\n          \"path\": \"/\",\n          \"description\": \"Get all tasks\"\n        },\n        {\n          \"method\": \"GET\",\n          \"path\": \"/:id\",\n          \"description\": \"Get a single task\"\n        },\n        {\n          \"method\": \"POST\",\n          \"path\": \"/\",\n          \"description\": \"Create a new task\"\n        },\n        {\n          \"method\": \"PUT\",\n          \"path\": \"/:id\",\n          \"description\": \"Update a task\"\n        },\n        {\n          \"method\": \"DELETE\",\n          \"path\": \"/:id\",\n          \"description\": \"Delete a task\"\n        }\n      ]\n    },\n    {\n      \"name\": \"api/notifications\",\n      \"description\": \"Sends email and in-app notifications\",\n      \"technologies\": [\"Node.js\", \"Express.js\", \"nodemailer\"],\n      \"endpoints\": [\n        {\n          \"method\": \"POST\",\n          \"path\": \"/\",\n          \"description\": \"Send a notification\"\n        }\n      ]\n    },\n    {\n      \"name\": \"api/search\",\n      \"description\": \"Provides search functionality using Elasticsearch\",\n      \"technologies\": [\"Node.js\", \"Express.js\", \"@elastic/elasticsearch\"],\n      \"endpoints\": [\n        {\n          \"method\": \"GET\",\n          \"path\": \"/\",\n          \"description\": \"Search tasks\"\n        }\n      ]\n    },\n    {\n      \"name\": \"api/analytics\",\n      \"description\": \"Collects and analyzes usage data\",\n      \"technologies\": [\"Node.js\", \"Express.js\"],\n      \"endpoints\": [\n        {\n          \"method\": \"GET\",\n          \"path\": \"/\",\n          \"description\": \"Get analytics data\"\n        }\n      ]\n    },\n    {\n      \"name\": \"api/recommendations\",\n      \"description\": \"Provides AI-powered task suggestions\",\n      \"technologies\": [\"Python\", \"scikit-learn\", \"Flask\"],\n      \"endpoints\": [\n        {\n          \"method\": \"GET\",\n          \"path\": \"/\",\n          \"description\": \"Get recommendations\"\n        }\n      ]\n    },\n    {\n      \"name\": \"web/src\",\n      \"description\": \"Frontend application using React\",\n      \"technologies\": [\"React\", \"Redux\", \"TypeScript\"],\n      \"components\": [\n        \"TaskList\",\n        \"TaskDetail\",\n        \"TaskForm\"\n      ]\n    },\n    {\n      \"name\": \"shared\",\n      \"description\": \"Shared libraries and utilities\",\n      \"components\": [\n        \"api-client\",\n        \"utils\",\n        \"components\"\n      ]\n    }\n  ],\n  \"interfaces\": {\n    \"api\": {\n      \"type\": \"REST\",\n      \"protocols\": [\"HTTP\", \"HTTPS\"],\n      \"authentication\": \"JWT\"\n    },\n    \"database\": {\n      \"type\": \"SQL\",\n      \"technology\": \"PostgreSQL\",\n      \"orm\": \"Sequelize\"\n    },\n    \"search\": {\n      \"type\": \"Elasticsearch\"\n    },\n    \"notification\": {\n      \"type\": \"Email\",\n      \"technology\": \"nodemailer\"\n    }\n  },\n  \"data_models\": {\n    \"users\": {\n      \"id\": { \"type\": \"integer\", \"primaryKey\": true },\n      \"username\": { \"type\": \"string\", \"unique\": true },\n      \"password\": { \"type\": \"string\" },\n      \"email\": { \"type\": \"string\", \"unique\": true }\n    },\n    \"tasks\": {\n      \"id\": { \"type\": \"integer\", \"primaryKey\": true },\n      \"title\": { \"type\": \"string\" },\n      \"description\": { \"type\": \"text\" },\n      \"status\": { \"type\": \"string\", \"enum\": [\"open\", \"in progress\", \"completed\"] },\n      \"userId\": { \"type\": \"integer\", \"foreignKey\": \"users.id\" },\n      \"projectId\": { \"type\": \"integer\", \"foreignKey\": \"projects.id\" },\n      \"createdAt\": { \"type\": \"timestamp\" },\n      \"updatedAt\": { \"type\": \"timestamp\" }\n    },\n    \"projects\": {\n      \"id\": { \"type\": \"integer\", \"primaryKey\": true },\n      \"name\": { \"type\": \"string\" },\n      \"description\": { \"type\": \"text\" },\n      \"createdAt\": { \"type\": \"timestamp\" },\n      \"updatedAt\": { \"type\": \"timestamp\" }\n    }\n  },\n  \"error_handling\": {\n    \"patterns\": [\n      \"Centralized error logging\",\n      \"HTTP status codes\",\n      \"Custom error objects\",\n      \"Error handling middleware\"\n    ],\n    \"implementation\": {\n      \"logging\": \"Use a centralized logging system (e.g., Winston, Bunyan) to log all errors and exceptions with timestamps, severity levels, and relevant context. Integrate with a monitoring system for real-time alerts.\",\n      \"http_status_codes\": \"Return appropriate HTTP status codes (e.g., 400 Bad Request, 401 Unauthorized, 500 Internal Server Error) to indicate the type of error. Use consistent error response formats (e.g., JSON) with error messages and codes.\",\n      \"custom_error_objects\": \"Create custom error objects to represent different types of errors. These objects can contain information about the error type, message, and location. This improves error handling consistency.\",\n      \"middleware\": \"Use error handling middleware to catch and handle errors that occur during API requests. This centralizes error handling logic and prevents errors from crashing the application.\"\n    }\n  },\n  \"performance_optimization_hooks\": [\n    \"Database query optimization (use indexes, efficient queries)\",\n    \"Caching (Redis for frequently accessed data)\",\n    \"Asynchronous operations (promises, async/await)\",\n    \"Load balancing (multiple API servers)\",\n    \"Code optimization (efficient algorithms, data structures)\",\n    \"CDN for static assets\"\n  ]\n}\n```",
  "module_boilerplate_task": "```json\n{\n  \"module_implementations\": {\n    \"api/authentication\": {\n      \"code\": \"// api/authentication/index.js\\nconst express = require('express');\\nconst router = express.Router();\\nconst jwt = require('jsonwebtoken');\\nconst { User } = require('../models'); // Assuming models are in a separate directory\\n\\n// Registration\\nrouter.post('/register', async (req, res) => {\\n  try {\\n    const { username, password, email } = req.body;\\n    const newUser = await User.create({ username, password, email });\\n    res.status(201).json({ message: 'User registered successfully', user: newUser });\\n  } catch (error) {\\n    console.error('Error registering user:', error);\\n    res.status(500).json({ error: 'Failed to register user' });\\n  }\\n});\\n\\n// Login\\nrouter.post('/login', async (req, res) => {\\n  try {\\n    const { username, password } = req.body;\\n    const user = await User.findOne({ where: { username } });\\n    if (!user || !user.validPassword(password)) {\\n      return res.status(401).json({ error: 'Invalid credentials' });\\n    }\\n    const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET);\\n    res.json({ token });\\n  } catch (error) {\\n    console.error('Error logging in user:', error);\\n    res.status(500).json({ error: 'Failed to log in' });\\n  }\\n});\\n\\nmodule.exports = router;\"\n    },\n    \"api/tasks\": {\n      \"code\": \"// api/tasks/index.js\\nconst express = require('express');\\nconst router = express.Router();\\nconst { Task } = require('../models');\\n\\n// Get all tasks\\nrouter.get('/', async (req, res) => {\\n  try {\\n    const tasks = await Task.findAll();\\n    res.json(tasks);\\n  } catch (error) {\\n    console.error('Error fetching tasks:', error);\\n    res.status(500).json({ error: 'Failed to fetch tasks' });\\n  }\\n});\\n\\n// Get a single task\\nrouter.get('/:id', async (req, res) => {\\n  try {\\n    const task = await Task.findByPk(req.params.id);\\n    if (!task) return res.status(404).json({ error: 'Task not found' });\\n    res.json(task);\\n  } catch (error) {\\n    console.error('Error fetching task:', error);\\n    res.status(500).json({ error: 'Failed to fetch task' });\\n  }\\n});\\n\\n// Create a new task\\nrouter.post('/', async (req, res) => {\\n  // ... (Implementation for creating a new task)\\n});\\n\\n// Update a task\\nrouter.put('/:id', async (req, res) => {\\n  // ... (Implementation for updating a task)\\n});\\n\\n// Delete a task\\nrouter.delete('/:id', async (req, res) => {\\n  // ... (Implementation for deleting a task)\\n});\\n\\nmodule.exports = router;\"\n    },\n    \"api/notifications\": {\n      \"code\": \"// api/notifications/index.js\\nconst express = require('express');\\nconst router = express.Router();\\nconst nodemailer = require('nodemailer');\\n\\nconst transporter = nodemailer.createTransport({\\n  // ... (nodemailer configuration)\\n});\\n\\nrouter.post('/', async (req, res) => {\\n  try {\\n    const { email, subject, message } = req.body;\\n    const info = await transporter.sendMail({\\n      from: process.env.EMAIL_FROM,\\n      to: email,\\n      subject: subject,\\n      text: message\\n    });\\n    res.json({ message: 'Notification sent successfully', info });\\n  } catch (error) {\\n    console.error('Error sending notification:', error);\\n    res.status(500).json({ error: 'Failed to send notification' });\\n  }\\n});\\n\\nmodule.exports = router;\"\n    },\n    \"api/search\": {\n      \"code\": \"// api/search/index.js\\nconst express = require('express');\\nconst router = express.Router();\\nconst client = require('@elastic/elasticsearch').Client({ ... }); // Elasticsearch client configuration\\n\\nrouter.get('/', async (req, res) => {\\n  try {\\n    const { query } = req.query;\\n    const result = await client.search({\\n      index: 'tasks', // Assuming index name is 'tasks'\\n      body: {\\n        query: {\\n          match: { title: query }\\n        }\\n      }\\n    });\\n    res.json(result.body.hits.hits);\\n  } catch (error) {\\n    console.error('Error searching tasks:', error);\\n    res.status(500).json({ error: 'Failed to search tasks' });\\n  }\\n});\\n\\nmodule.exports = router;\"\n    },\n    \"api/analytics\": {\n      \"code\": \"// api/analytics/index.js\\nconst express = require('express');\\nconst router = express.Router();\\n\\nrouter.get('/', (req, res) => {\\n  // ... (Implementation for getting analytics data)\\n});\\n\\nmodule.exports = router;\"\n    },\n    \"api/recommendations\": {\n      \"code\": \"// api/recommendations/index.js\\nconst express = require('express');\\nconst router = express.Router();\\n\\nrouter.get('/', (req, res) => {\\n  // ... (Implementation for getting recommendations)\\n});\\n\\nmodule.exports = router;\"\n    },\n    \"web/src\": {\n      \"code\": \"// web/src/App.tsx\\nimport React from 'react';\\nimport TaskList from './components/TaskList';\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"App\\\">\\n      <h1>Task Management App</h1>\\n      <TaskList />\\n    </div>\\n  );\\n}\\n\\nexport default App;\"\n    },\n    \"shared/api-client\": {\n      \"code\": \"// shared/api-client.js\\nclass ApiClient {\\n  constructor(baseURL) {\\n    this.baseURL = baseURL;\\n  }\\n\\n  async get(endpoint) {\\n    // ... (Implementation for GET request)\\n  }\\n\\n  // ... (Implement other HTTP methods: POST, PUT, DELETE)\\n}\\n\\nexport default ApiClient;\"\n    }\n  },\n  \"interface_code\": {\n    \"api\": \"// api/index.js\\nconst express = require('express');\\nconst app = express();\\n// ... (middleware)\\nconst authRouter = require('./authentication');\\nconst tasksRouter = require('./tasks');\\n// ... (other routers)\\n\\napp.use('/auth', authRouter);\\napp.use('/tasks', tasksRouter);\\n// ... (other routes)\\n\\napp.listen(process.env.PORT || 3000, () => {\\n  console.log('API server listening on port 3000');\\n});\"\n  },\n  \"data_model_code\": {\n    \"users\": \"// models/User.js\\nconst { DataTypes } = require('sequelize');\\nconst bcrypt = require('bcrypt'); // For password hashing\\n\\nmodule.exports = (sequelize) => {\\n  return sequelize.define('User', {\\n    username: {\\n      type: DataTypes.STRING,\\n      unique: true,\\n      allowNull: false\\n    },\\n    password: {\\n      type: DataTypes.STRING,\\n      allowNull: false\\n    },\\n    email: {\\n      type: DataTypes.STRING,\\n      unique: true,\\n      allowNull: false,\\n      validate: {\\n        isEmail: true\\n      }\\n    }\\n  }, {\\n    hooks: {\\n      beforeCreate: async (user) => {\\n        const salt = await bcrypt.genSalt(10);\\n        user.password = await bcrypt.hash(user.password, salt);\\n      }\\n    },\\n    instanceMethods: {\\n      validPassword: async function(password) {\\n        return await bcrypt.compare(password, this.password);\\n      }\\n    }\\n  });\\n};\",\n    \"tasks\": \"// models/Task.js\\nmodule.exports = (sequelize, DataTypes) => {\\n  const Task = sequelize.define('Task', {\\n    title: DataTypes.STRING,\\n    description: DataTypes.TEXT,\\n    status: DataTypes.STRING\\n  }, {});\\n  Task.associate = (models) => {\\n    Task.belongsTo(models.User, {\\n      foreignKey: 'userId'\\n    });\\n    // ... (Associations with other models)\\n  };\\n  return Task;\\n};\",\n    \"projects\": \"// models/Project.js\\nmodule.exports = (sequelize, DataTypes) => {\\n  const Project = sequelize.define('Project', {\\n    name: DataTypes.STRING,\\n    description: DataTypes.TEXT\\n  }, {});\\n  return Project;\\n};\"\n  },\n  \"error_handling_code\": {\n    \"middleware\": \"// api/middleware/error.js\\nconst express = require('express');\\n\\nconst errorHandler = (err, req, res, next) => {\\n  console.error(err.stack);\\n  res.status(err.status || 500).json({ error: err.message || 'Internal Server Error' });\\n};\\n\\nmodule.exports = errorHandler;\"\n  }\n}\n```",
  "testing_boilerplate_task": "```json\n{\n  \"unit_tests\": {\n    \"api/authentication\": {\n      \"register\": \"const { expect } = require('chai');\\nconst request = require('supertest');\\nconst app = require('../../app'); // Assuming the app is started in app.js\\nconst { User } = require('../../models');\\n\\ndescribe('POST /auth/register', () => {\\n  it('should register a new user', async () => {\\n    const res = await request(app).post('/auth/register').send({\\n      username: 'testuser',\\n      password: 'password',\\n      email: 'test@example.com'\\n    });\\n    expect(res.status).to.equal(201);\\n    expect(res.body.message).to.equal('User registered successfully');\\n    const user = await User.findOne({ where: { username: 'testuser' } });\\n    expect(user).to.not.be.null;\\n  });\\n\\n  it('should handle errors gracefully', async () => {\\n    const res = await request(app).post('/auth/register').send({\\n      // Missing fields\\n    });\\n    expect(res.status).to.equal(400); // Or 500, depending on error handling\\n  });\\n});\",\n      \"login\": \"const { expect } = require('chai');\\nconst request = require('supertest');\\nconst app = require('../../app');\\nconst { User } = require('../../models');\\n\\ndescribe('POST /auth/login', () => {\\n  it('should log in a user with valid credentials', async () => {\\n    const user = await User.create({ username: 'testuser', password: 'password', email: 'test@example.com' });\\n    const res = await request(app).post('/auth/login').send({\\n      username: 'testuser',\\n      password: 'password'\\n    });\\n    expect(res.status).to.equal(200);\\n    expect(res.body.token).to.not.be.undefined;\\n  });\\n\\n  it('should handle invalid credentials', async () => {\\n    const res = await request(app).post('/auth/login').send({\\n      username: 'testuser',\\n      password: 'wrongpassword'\\n    });\\n    expect(res.status).to.equal(401);\\n    expect(res.body.error).to.equal('Invalid credentials');\\n  });\\n});\"\n    },\n    \"api/tasks\": {\n      \"getAll\": \"const { expect } = require('chai');\\nconst request = require('supertest');\\nconst app = require('../../app');\\n\\ndescribe('GET /tasks', () => {\\n  it('should get all tasks', async () => {\\n    const res = await request(app).get('/tasks');\\n    expect(res.status).to.equal(200);\\n    expect(Array.isArray(res.body)).to.be.true;\\n  });\\n});\",\n      \"getSingle\": \"const { expect } = require('chai');\\nconst request = require('supertest');\\nconst app = require('../../app');\\nconst { Task } = require('../../models');\\n\\ndescribe('GET /tasks/:id', () => {\\n  it('should get a single task', async () => {\\n    const task = await Task.create({ title: 'Test Task' });\\n    const res = await request(app).get(`/tasks/${task.id}`);\\n    expect(res.status).to.equal(200);\\n    expect(res.body.title).to.equal('Test Task');\\n  });\\n\\n  it('should handle task not found', async () => {\\n    const res = await request(app).get('/tasks/999');\\n    expect(res.status).to.equal(404);\\n  });\\n});\",\n      \"create\": \"// Requires implementation of POST /tasks\\nconst { expect } = require('chai');\\nconst request = require('supertest');\\nconst app = require('../../app');\\nconst { Task } = require('../../models');\\n\\ndescribe('POST /tasks', () => {\\n  it('should create a new task', async () => {\\n    const res = await request(app).post('/tasks').send({\\n      title: 'New Task',\\n      description: 'Task description'\\n    });\\n    expect(res.status).to.equal(201);\\n    expect(res.body.title).to.equal('New Task');\\n  });\\n});\",\n      \"update\": \"// Requires implementation of PUT /tasks/:id\\nconst { expect } = require('chai');\\nconst request = require('supertest');\\nconst app = require('../../app');\\nconst { Task } = require('../../models');\\n\\ndescribe('PUT /tasks/:id', () => {\\n  it('should update an existing task', async () => {\\n    // ...\\n  });\\n});\",\n      \"delete\": \"// Requires implementation of DELETE /tasks/:id\\nconst { expect } = require('chai');\\nconst request = require('supertest');\\nconst app = require('../../app');\\nconst { Task } = require('../../models');\\n\\ndescribe('DELETE /tasks/:id', () => {\\n  it('should delete a task', async () => {\\n    // ...\\n  });\\n});\"\n    },\n    \"api/notifications\": {\n      \"send\": \"// Requires mocking of nodemailer\\nconst { expect } = require('chai');\\nconst request = require('supertest');\\nconst app = require('../../app');\\nconst sinon = require('sinon'); // Or any other mocking library\\n\\ndescribe('POST /notifications', () => {\\n  let sendMailStub;\\n  beforeEach(() => {\\n    sendMailStub = sinon.stub(nodemailer.transporter, 'sendMail');\\n  });\\n\\n  afterEach(() => {\\n    sendMailStub.restore();\\n  });\\n\\n  it('should send a notification', async () => {\\n    sendMailStub.resolves({ /* Mock response */ });\\n    const res = await request(app).post('/notifications').send({\\n      email: 'test@example.com',\\n      subject: 'Test Notification',\\n      message: 'Test message'\\n    });\\n    expect(res.status).to.equal(200);\\n    expect(sendMailStub.calledOnce).to.be.true;\\n  });\\n});\"\n    },\n    // Add unit tests for other API routes similarly...\n    \"shared/api-client\": {\n      \"get\": \"const { expect } = require('chai');\\nconst ApiClient = require('../shared/api-client');\\nconst axios = require('axios'); // Or the HTTP library you're using\\nconst sinon = require('sinon');\\n\\ndescribe('ApiClient', () => {\\n  let axiosStub;\\n  beforeEach(() => {\\n    axiosStub = sinon.stub(axios, 'get');\\n  });\\n\\n  afterEach(() => {\\n    axiosStub.restore();\\n  });\\n\\n  it('should make a GET request', async () => {\\n    axiosStub.resolves({ data: { test: 'data' } });\\n    const apiClient = new ApiClient('http://example.com');\\n    const data = await apiClient.get('/test');\\n    expect(data).to.deep.equal({ test: 'data' });\\n    expect(axiosStub.calledOnce).to.be.true;\\n  });\\n});\"\n    }\n  },\n  \"integration_tests\": {\n    \"api\": \"const { expect } = require('chai');\\nconst request = require('supertest');\\nconst app = require('../app');\\n\\ndescribe('API Integration Tests', () => {\\n  it('should register a user and then log them in', async () => {\\n    // Register a user\\n    let registerResponse = await request(app).post('/auth/register').send({\\n      username: 'integrationTestUser',\\n      password: 'password',\\n      email: 'integrationTest@example.com'\\n    });\\n    expect(registerResponse.status).to.equal(201);\\n\\n    // Log in the user\\n    let loginResponse = await request(app).post('/auth/login').send({\\n      username: 'integrationTestUser',\\n      password: 'password'\\n    });\\n    expect(loginResponse.status).to.equal(200);\\n    expect(loginResponse.body.token).to.not.be.undefined;\\n  });\\n  // Add more integration tests to cover various API interactions... \\n});\"\n  },\n  \"performance_tests\": {\n    \"api\": \"const http = require('http');\\nconst { expect } = require('chai');\\nconst app = require('../app'); // Your express app\\n\\ndescribe('Performance Tests', () => {\\n    let server; \\n    before(() => {\\n        server = http.createServer(app);\\n        server.listen(3001); // Use a different port than your main app\\n    });\\n\\n    after(() => {\\n        server.close();\\n    });\\n\\n  it('should respond to requests within a certain timeframe', (done) => {\\n    const startTime = Date.now();\\n    http.get('http://localhost:3001/tasks', (res) => {\\n      res.on('data', () => {});\\n      res.on('end', () => {\\n        const endTime = Date.now();\\n        const responseTime = endTime - startTime;\\n        expect(responseTime).to.be.lessThan(100); // Adjust the threshold as needed\\n        done();\\n      });\\n    }).on('error', (err) => done(err));\\n  });\\n    // Add more performance tests for other API endpoints and functionalities\\n});\"\n  },\n  \"test_utilities\": {\n    \"utils\": \"const jwt = require('jsonwebtoken');\\n\\nconst generateTestToken = (payload) => {\\n  // Use a different secret for testing\\n  return jwt.sign(payload, 'test-secret');\\n};\\n\\nmodule.exports = { generateTestToken };\"\n  }\n}\n```",
  "documentation_task": "```json\n{\n  \"api_docs\": {\n    \"/auth/register\": {\n      \"method\": \"POST\",\n      \"description\": \"Registers a new user.\",\n      \"request_body\": {\n        \"username\": \"string (required)\",\n        \"password\": \"string (required)\",\n        \"email\": \"string (required)\"\n      },\n      \"response_201\": {\n        \"message\": \"User registered successfully\",\n        \"user\": \"User object\"\n      },\n      \"response_500\": {\n        \"error\": \"Failed to register user\"\n      }\n    },\n    \"/auth/login\": {\n      \"method\": \"POST\",\n      \"description\": \"Logs in an existing user.\",\n      \"request_body\": {\n        \"username\": \"string (required)\",\n        \"password\": \"string (required)\"\n      },\n      \"response_200\": {\n        \"token\": \"JWT token\"\n      },\n      \"response_401\": {\n        \"error\": \"Invalid credentials\"\n      },\n      \"response_500\": {\n        \"error\": \"Failed to log in\"\n      }\n    },\n    \"/tasks\": {\n      \"method\": \"GET\",\n      \"description\": \"Retrieves all tasks.\",\n      \"response_200\": \"[Task object]\"\n    },\n    \"/tasks/:id\": {\n      \"method\": \"GET\",\n      \"description\": \"Retrieves a single task by ID.\",\n      \"response_200\": \"Task object\",\n      \"response_404\": {\n        \"error\": \"Task not found\"\n      }\n    },\n    \"/tasks\": {\n      \"method\": \"POST\",\n      \"description\": \"Creates a new task.\",\n      \"request_body\": {\n        \"title\": \"string (required)\",\n        \"description\": \"string\",\n        \"status\": \"string\"\n      },\n      \"response_201\": {\n          \"message\": \"Task created successfully\",\n          \"task\": \"Task object\"\n      },\n      \"response_500\": {\n        \"error\": \"Failed to create task\"\n      }\n    },\n    \"/tasks/:id\": {\n      \"method\": \"PUT\",\n      \"description\": \"Updates an existing task.\",\n      \"request_body\": {\n        \"title\": \"string\",\n        \"description\": \"string\",\n        \"status\": \"string\"\n      },\n      \"response_200\": {\n        \"message\": \"Task updated successfully\"\n      },\n      \"response_404\": {\n        \"error\": \"Task not found\"\n      },\n      \"response_500\": {\n        \"error\": \"Failed to update task\"\n      }\n    },\n    \"/tasks/:id\": {\n      \"method\": \"DELETE\",\n      \"description\": \"Deletes a task.\",\n      \"response_200\": {\n        \"message\": \"Task deleted successfully\"\n      },\n      \"response_404\": {\n        \"error\": \"Task not found\"\n      },\n      \"response_500\": {\n        \"error\": \"Failed to delete task\"\n      }\n    },\n    \"/notifications\": {\n      \"method\": \"POST\",\n      \"description\": \"Sends a notification email.\",\n      \"request_body\": {\n        \"email\": \"string (required)\",\n        \"subject\": \"string (required)\",\n        \"message\": \"string (required)\"\n      },\n      \"response_200\": {\n        \"message\": \"Notification sent successfully\",\n        \"info\": \"Nodemailer info object\"\n      },\n      \"response_500\": {\n        \"error\": \"Failed to send notification\"\n      }\n    },\n    \"/search\": {\n      \"method\": \"GET\",\n      \"description\": \"Searches for tasks.\",\n      \"query_params\": {\n        \"query\": \"string (required)\"\n      },\n      \"response_200\": \"[Task object]\"\n    },\n    \"/analytics\": {\n      \"method\": \"GET\",\n      \"description\": \"Retrieves analytics data.\"\n    },\n    \"/recommendations\": {\n      \"method\": \"GET\",\n      \"description\": \"Retrieves task recommendations.\"\n    }\n  },\n  \"architecture_docs\": \"The application follows a three-tier architecture:\\n\\n1. **Presentation Tier:**  The web frontend (React) handles user interaction and displays data.\\n2. **Application Tier:** The Node.js API handles requests, business logic, and interacts with the data tier.\\n3. **Data Tier:**  A PostgreSQL database stores persistent data using Sequelize ORM for database interactions.\\n\\nThe API uses RESTful principles.  Authentication is handled via JWT.  The frontend communicates with the API using an ApiClient, facilitating modularity and testability.  Elasticsearch is used for task search functionality.\",\n  \"module_docs\": {\n    \"api/authentication\": \"Handles user registration and login using JWT.\",\n    \"api/tasks\": \"Manages CRUD operations (Create, Read, Update, Delete) for tasks.\",\n    \"api/notifications\": \"Sends email notifications using Nodemailer.\",\n    \"api/search\": \"Handles task search using Elasticsearch.\",\n    \"api/analytics\": \"Provides API endpoints for retrieving analytics data.\",\n    \"api/recommendations\": \"Provides API endpoints for retrieving task recommendations.\",\n    \"web/src\": \"Contains the React frontend code.\",\n    \"shared/api-client\": \"A reusable API client for making HTTP requests.\"\n  },\n  \"integration_guides\": {\n    \"frontend_integration\": \"The frontend interacts with the API using the shared/api-client module.  Authentication is handled via JWT tokens stored in local storage (or similar).  Error handling is implemented in the ApiClient and handled appropriately in the frontend components.\",\n    \"database_integration\": \"The API interacts with the PostgreSQL database using Sequelize ORM.  Models (User, Task, etc.) define the database schema.  Database migrations are used to manage schema changes.\",\n    \"elasticsearch_integration\": \"The api/search module utilizes the Elasticsearch client to perform search operations against the tasks index. Ensure an Elasticsearch instance is running and the index is correctly configured.\",\n    \"email_integration\": \"The api/notifications module requires configuration of Nodemailer with SMTP credentials. Make sure the environment variables are set and that your email provider supports the configuration.\"\n  },\n  \"performance_guidelines\": {\n    \"database\": \"Use appropriate database indexes, optimize queries, and consider caching frequently accessed data.\",\n    \"api\": \"Use efficient algorithms and data structures, handle asynchronous operations effectively, and implement appropriate error handling.\",\n    \"frontend\": \"Optimize images and other assets, use efficient rendering techniques, and minimize HTTP requests.\",\n    \"caching\": \"Implement caching mechanisms (e.g., Redis) for frequently accessed data to improve response times.\",\n    \"load_balancing\": \"For high-traffic applications, consider using load balancing to distribute requests across multiple servers.\"\n  }\n}\n```"
}