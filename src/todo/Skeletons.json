{
  "code_research_task": "```json\n{\n  \"similar_implementations\": [\n    {\n      \"name\": \"TodoMVC\",\n      \"description\": \"A collection of Todo applications in various JavaScript frameworks, showcasing different architectural patterns and approaches.\",\n      \"url\": \"https://todomvc.com/\"\n    },\n    {\n      \"name\": \"React Task Management App (various examples on GitHub)\",\n      \"description\": \"Numerous React-based task management applications available on GitHub, demonstrating different features and complexity levels.\",\n      \"url\": \"https://github.com/search?q=react+task+management\"\n    },\n    {\n      \"name\": \"Angular Task Management App (various examples on GitHub)\",\n      \"description\": \"Similar to React examples, numerous Angular-based task management applications showcasing different architectural patterns.\",\n      \"url\": \"https://github.com/search?q=angular+task+management\"\n    },\n    {\n      \"name\": \"Vue.js Task Management App (various examples on GitHub)\",\n      \"description\": \"Various examples of task management applications built using Vue.js, offering different levels of sophistication.\",\n      \"url\": \"https://github.com/search?q=vue+task+management\"\n    },\n    {\n      \"name\": \"Python/Django or Flask Task Management Apps (various examples on GitHub)\",\n      \"description\": \"Examples of backend-focused task management applications using Python frameworks like Django or Flask.\",\n      \"url\": \"https://github.com/search?q=python+task+management\"\n    }\n  ],\n  \"code_patterns\": [\n    \"MVC (Model-View-Controller) or MVVM (Model-View-ViewModel):  Separating concerns into distinct components for better organization and maintainability.\",\n    \"Component-based architecture:  Breaking down the UI into reusable components for easier development and updates.\",\n    \"Redux/Flux/Zustand (for frontend): State management libraries for handling application state efficiently.\",\n    \"RESTful APIs (for backend):  Building well-defined APIs for communication between frontend and backend.\",\n    \"Database interactions (ORM): Using Object-Relational Mappers (like Django ORM, Sequelize, Mongoose) to interact with databases.\",\n    \"Authentication and authorization: Implementing secure user authentication and authorization mechanisms (e.g., JWT).\"\n  ],\n  \"best_practices\": [\n    \"Use a version control system (Git): Essential for collaboration and tracking changes.\",\n    \"Write unit and integration tests:  Improve code quality and reduce bugs.\",\n    \"Follow coding style guidelines: Maintain consistency and readability.\",\n    \"Use a linter and formatter: Enforce code style and catch potential errors.\",\n    \"Implement continuous integration/continuous deployment (CI/CD): Automate build, testing, and deployment processes.\",\n    \"Employ security best practices: Protect user data and prevent vulnerabilities (e.g., input sanitization, secure authentication).\",\n    \"Use a robust framework: Choose a suitable framework (e.g., React, Angular, Vue.js for frontend, Django, Flask, Node.js for backend) to streamline development.\"\n  ],\n  \"lessons_learned\": [\n    \"Prioritize user experience (UX):  Focus on making the application intuitive and easy to use.\",\n    \"Start with a Minimum Viable Product (MVP):  Build a core set of features first and iterate based on user feedback.\",\n    \"Thorough testing is crucial:  Test all aspects of the application thoroughly to prevent bugs and issues.\",\n    \"Scalability and maintainability should be considered from the start:  Design the application to handle future growth and changes.\",\n    \"Proper documentation is essential:  Document the code, architecture, and APIs for easier maintenance and collaboration.\"\n  ],\n  \"optimization_techniques\": [\n    \"Efficient database queries: Optimize database queries to reduce execution time.\",\n    \"Caching: Implement caching mechanisms to reduce the number of database calls and improve response times.\",\n    \"Code optimization:  Write efficient code to minimize resource consumption.\",\n    \"Lazy loading: Load data only when needed.\",\n    \"Content Delivery Network (CDN): Use a CDN to serve static assets (images, CSS, JavaScript) from geographically closer servers.\",\n    \"Frontend performance optimization: Minimize HTTP requests, optimize images, and use efficient JavaScript libraries.\",\n    \"Backend optimization: Use appropriate server-side technologies and configurations for optimal performance.\",\n    \"Load balancing: Distribute traffic across multiple servers to handle increased load.\"\n  ]\n}\n```",
  "code_skeleton_task": "```json\n{\n  \"project_structure\": {\n    \"description\": \"Microservices architecture with a React frontend.\",\n    \"directories\": [\n      {\n        \"name\": \"frontend\",\n        \"contents\": [\n          \"src/\",\n          \"public/\",\n          \"package.json\",\n          \"README.md\"\n        ]\n      },\n      {\n        \"name\": \"backend\",\n        \"contents\": [\n          \"api-gateway/\",\n          \"auth-service/\",\n          \"task-service/\",\n          \"project-service/\",\n          \"nlp-service/\",\n          \"ml-service/\",\n          \"package.json\", \n          \"Dockerfile\",\n          \"README.md\"\n        ]\n      },\n      {\n        \"name\": \"database\",\n        \"contents\": [\n          \"schema.sql\",\n          \"migrations/\",\n          \"README.md\"\n        ]\n      },          \n      {\n        \"name\": \"infrastructure\",\n        \"contents\": [\n          \"kafka/\",\n          \"elk/\",\n          \"ci-cd/\",\n          \"README.md\"\n        ]\n      },\n      {\n        \"name\": \"docs\",\n        \"contents\": [\n          \"architecture.md\",\n          \"api-docs/\",\n          \"README.md\"\n        ]      \n      }\n    ]\n  },\n  \"core_modules\": {\n    \"frontend\": [\n      {\n        \"name\": \"components\",\n        \"description\": \"Reusable UI components (Task, Project, User, etc.)\",\n        \"files\": [\"Task.tsx\", \"Project.tsx\", \"User.tsx\", ...]\n      },\n      {\n        \"name\": \"services\",\n        \"description\": \"API interaction logic (fetch tasks, create tasks)\",\n        \"files\": [\"TaskService.ts\", \"ProjectService.ts\", \"AuthService.ts\"]\n      },\n      {\n        \"name\": \"store\",\n        \"description\": \"Redux Toolkit store for managing application state\",\n        \"files\": [\"store.ts\", \"slices/*.ts\"]\n      },\n      {\n        \"name\": \"utils\",\n        \"description\": \"Helper functions and utilities\",\n        \"files\": [\"dateUtils.ts\", \"apiUtils.ts\"]\n      }\n    ],\n    \"backend\": [\n      {\n        \"name\": \"api-gateway\",\n        \"description\": \"API Gateway implementation (Kong/Apigee)\",\n        \"files\": [\"gateway.conf\", \"routes.js\"]\n      },      \n      {\n        \"name\": \"auth-service\",\n        \"description\": \"Authentication microservice (Node.js/Python)\",\n        \"files\": [\"auth.js\", \"models/User.js\", \"routes/auth.js\"]\n      },\n      {\n        \"name\": \"task-service\",\n        \"description\": \"Task management microservice (Node.js/Go)\",\n        \"files\": [\"tasks.js\", \"models/Task.js\", \"routes/tasks.js\"]\n      },\n      {\n        \"name\": \"project-service\",\n        \"description\": \"Project management microservice (Node.js/Go)\",\n        \"files\": [\"projects.js\", \"models/Project.js\", \"routes/projects.js\"]\n      },\n      {\n        \"name\": \"nlp-service\",\n        \"description\": \"NLP microservice (Python)\",\n        \"files\": [\"nlp.py\", \"models/\", \"routes/nlp.py\"]\n      },\n      {\n        \"name\": \"ml-service\",\n        \"description\": \"ML microservice (Python)\",\n        \"files\": [\"ml.py\", \"models/\", \"routes/ml.py\"]\n      },\n      {\n        \"name\": \"database\",\n        \"description\": \"Database interaction layer\",\n        \"files\": [\"db.js\", \"models/*.js\"]\n      }\n    ]\n  },\n  \"interfaces\": {\n    \"frontend_to_backend\": {\n      \"protocol\": \"REST\",\n      \"format\": \"JSON\",\n      \"endpoints\": [\n        \"/tasks\",\n        \"/projects\",\n        \"/auth/login\",\n        \"/auth/register\"\n      ]\n    },\n    \"microservices_communication\": {\n      \"protocol\": \"Kafka\",\n      \"format\": \"JSON\",\n      \"topics\": [\n        \"task_created\",\n        \"task_updated\",\n        \"project_created\",\n        \"nlp_processed\"\n      ]\n    },    \n    \"database\": {\n      \"type\": \"PostgreSQL\",\n      \"driver\": \"pg\"\n    }\n  },\n  \"data_models\": {\n    \"user\": {\n      \"id\": \"UUID\",\n      \"username\": \"string\",\n      \"password_hash\": \"string\",\n      \"roles\": \"array\"\n    },\n    \"task\": {\n      \"id\": \"UUID\",\n      \"title\": \"string\",\n      \"description\": \"text\",\n      \"dueDate\": \"date\",\n      \"priority\": \"enum\",\n      \"status\": \"enum\",\n      \"projectId\": \"UUID\",\n      \"userId\": \"UUID\"\n    },\n    \"project\": {\n      \"id\": \"UUID\",\n      \"name\": \"string\",\n      \"description\": \"text\",\n      \"userId\": \"UUID\"\n    }\n  },\n  \"error_handling\": {\n    \"pattern\": \"Centralized error handling middleware in backend microservices.  Custom error objects for different types of errors, logging of errors and sending appropriate error responses to clients.\",\n    \"frontend\": \"Error handling components and boundary to display error messages to the user.\",\n    \"backend\": \"Global error handling middleware for all microservices, logging errors to a centralized logging system and handling specific exceptions.\"\n  },\n  \"performance_optimization_hooks\": {\n    \"database\": [\n      \"Query optimization\",\n      \"Indexing\",\n      \"Connection pooling\"\n    ],\n    \"caching\": [\n      \"Redis caching for frequently accessed data\",\n      \"CDN for static assets\"\n    ],\n    \"api_gateway\": [\n      \"Rate limiting\",\n      \"Load balancing\"\n    ],\n    \"microservices\": [\n      \"Asynchronous processing (message queues)\",\n      \"Efficient algorithms and data structures\"\n    ],\n    \"frontend\": [\n      \"Code splitting\",\n      \"Lazy loading\",\n      \"Efficient rendering\"\n    ]\n  }\n}\n```",
  "module_boilerplate_task": "```json\n{\n  \"module_implementations\": {\n    \"frontend\": {\n      \"components\": {\n        \"Task.tsx\": \"// Task component\\nimport React from 'react';\\nimport { Task } from '../services/TaskService';\\n\\ninterface TaskProps {\\n  task: Task;\\n}\\n\\nconst TaskComponent: React.FC<TaskProps> = ({ task }) => {\\n  return (\\n    <div>\\n      <h3>{task.title}</h3>\\n      <p>{task.description}</p>\\n      <p>Due Date: {task.dueDate}</p>\\n    </div>\\n  );\\n};\\n\\nexport default TaskComponent;\"\n      },\n      \"services\": {\n        \"TaskService.ts\": \"// Task service\\nimport axios from 'axios';\\n\\nexport interface Task {\\n  id: string;\\n  title: string;\\n  description: string;\\n  dueDate: string;\\n}\\n\\nexport const getTasks = async (): Promise<Task[]> => {\\n  try {\\n    const response = await axios.get('/tasks');\\n    return response.data;\\n  } catch (error) {\\n    console.error('Error fetching tasks:', error);\\n    throw error; // Re-throw for handling in calling function\\n  }\\n};\\n\\nexport const createTask = async (task: Omit<Task, 'id'>): Promise<Task> => {\\n  try {\\n    const response = await axios.post('/tasks', task);\\n    return response.data;\\n  } catch (error) {\\n    console.error('Error creating task:', error);\\n    throw error;\\n  }\\n};\"\n      },\n      \"store\": {\n        \"store.ts\": \"// Redux store\\nimport { configureStore } from '@reduxjs/toolkit';\\nimport tasksReducer from './slices/tasksSlice';\\n\\nconst store = configureStore({\\n  reducer: {\\n    tasks: tasksReducer,\\n  },\\n});\\n\\nexport type RootState = ReturnType<typeof store.getState>;\\nexport type AppDispatch = typeof store.dispatch;\\nexport default store;\"\n      },\n      \"utils\": {\n        \"dateUtils.ts\": \"// Date utilities\\nexport const formatDate = (date: Date): string => {\\n  return date.toLocaleDateString();\\n};\"\n      }\n    },\n    \"backend\": {\n      \"task-service\": {\n        \"tasks.js\": \"// Task service (Node.js example)\\nconst express = require('express');\\nconst router = express.Router();\\nconst Task = require('./models/Task');\\n\\nrouter.get('/', async (req, res) => {\\n  try {\\n    const tasks = await Task.findAll();\\n    res.json(tasks);\\n  } catch (error) {\\n    console.error('Error fetching tasks:', error);\\n    res.status(500).json({ error: 'Failed to fetch tasks' });\\n  }\\n});\\n\\nrouter.post('/', async (req, res) => {\\n  try {\\n    const task = await Task.create(req.body);\\n    res.json(task);\\n  } catch (error) {\\n    console.error('Error creating task:', error);\\n    res.status(500).json({ error: 'Failed to create task' });\\n  }\\n});\\n\\nmodule.exports = router;\"\n      },\n      \"models\": {\n        \"Task.js\": \"// Task model (Sequelize example)\\nconst { DataTypes } = require('sequelize');\\nconst sequelize = require('../db');\\n\\nconst Task = sequelize.define('Task', {\\n  id: {\\n    type: DataTypes.UUID,\\n    defaultValue: DataTypes.UUIDV4,\\n    primaryKey: true,\\n  },\\n  title: DataTypes.STRING,\\n  description: DataTypes.TEXT,\\n  dueDate: DataTypes.DATE,\\n  priority: DataTypes.ENUM('high', 'medium', 'low'),\\n  status: DataTypes.ENUM('open', 'in progress', 'completed'),\\n  projectId: DataTypes.UUID,\\n  userId: DataTypes.UUID,\\n});\\n\\nmodule.exports = Task;\"\n      },\n      \"api-gateway\": {\n        \"gateway.conf\": \"//Example Kong Gateway Configuration (replace with your actual configuration)\\n...\\n\"\n      },\n      \"auth-service\": {\n        \"auth.js\": \"//Authentication service (example)\\n...\\n\"\n      },\n      \"database\": {\n        \"db.js\": \"//Database connection (example using pg)\\nconst { Pool } = require('pg');\\nconst pool = new Pool({\\n  user: 'your_db_user',\\n  host: 'your_db_host',\\n  database: 'your_db_name',\\n  password: 'your_db_password',\\n  port: 5432,\\n});\\n\\nmodule.exports = pool;\"\n      }\n    }\n  },\n  \"interface_code\": {\n    \"frontend_to_backend\": \"// REST API interfaces defined in frontend services (e.g., TaskService.ts)\",\n    \"microservices_communication\": \"// Kafka topic definitions and producer/consumer implementations in microservices\",\n    \"database\": \"// Database interaction layer defined using Sequelize ORM or similar\"\n  },\n  \"data_model_code\": {\n    \"user\": \"// Defined in auth-service/models/User.js (or similar)\",\n    \"task\": \"// Defined in task-service/models/Task.js (or similar)\",\n    \"project\": \"// Defined in project-service/models/Project.js (or similar)\"\n  },\n  \"error_handling_code\": {\n    \"frontend\": \"// Error handling implemented in React components using error boundaries and state management\",\n    \"backend\": \"// Centralized error handling middleware in each microservice using Express.js error handling or similar\"\n  }\n}\n```",
  "testing_boilerplate_task": "```json\n{\n  \"unit_tests\": {\n    \"frontend\": {\n      \"components\": {\n        \"TaskComponent.test.tsx\": \"import React from 'react';\\nimport { render, screen } from '@testing-library/react';\\nimport TaskComponent from './TaskComponent';\\nimport { Task } from '../services/TaskService';\\n\\ntest('renders task title', () => {\\n  const mockTask: Task = {\\n    id: '1',\\n    title: 'Test Task',\\n    description: 'This is a test task.',\\n    dueDate: '2024-03-15'\\n  };\\n  render(<TaskComponent task={mockTask} />);\\n  expect(screen.getByText('Test Task')).toBeInTheDocument();\\n});\\n\\ntest('renders task description', () => {\\n  const mockTask: Task = {\\n    id: '1',\\n    title: 'Test Task',\\n    description: 'This is a test task.',\\n    dueDate: '2024-03-15'\\n  };\\n  render(<TaskComponent task={mockTask} />);\\n  expect(screen.getByText('This is a test task.')).toBeInTheDocument();\\n});\\n\\ntest('renders due date', () => {\\n  const mockTask: Task = {\\n    id: '1',\\n    title: 'Test Task',\\n    description: 'This is a test task.',\\n    dueDate: '2024-03-15'\\n  };\\n  render(<TaskComponent task={mockTask} />);\\n  expect(screen.getByText('Due Date: 2024-03-15')).toBeInTheDocument();\\n});\"\n      },\n      \"services\": {\n        \"TaskService.test.ts\": \"import { getTasks, createTask, Task } from './TaskService';\\nimport axios from 'axios';\\n\\njest.mock('axios');\\n\\ntest('getTasks fetches tasks successfully', async () => {\\n  const mockTasks: Task[] = [\\n    { id: '1', title: 'Task 1', description: 'Description 1', dueDate: '2024-03-10' },\\n    { id: '2', title: 'Task 2', description: 'Description 2', dueDate: '2024-03-15' }\\n  ];\\n  (axios.get as jest.Mock).mockResolvedValue({ data: mockTasks });\\n  const tasks = await getTasks();\\n  expect(tasks).toEqual(mockTasks);\\n});\\n\\ntest('getTasks handles errors', async () => {\\n  (axios.get as jest.Mock).mockRejectedValue(new Error('Network error'));\\n  await expect(getTasks()).rejects.toThrow('Network error');\\n});\\n\\ntest('createTask creates a task successfully', async () => {\\n  const newTask: Omit<Task, 'id'> = {\\n    title: 'New Task',\\n    description: 'Description',\\n    dueDate: '2024-03-20'\\n  };\\n  const mockCreatedTask: Task = { ...newTask, id: '3' };\\n  (axios.post as jest.Mock).mockResolvedValue({ data: mockCreatedTask });\\n  const createdTask = await createTask(newTask);\\n  expect(createdTask).toEqual(mockCreatedTask);\\n});\\n\\ntest('createTask handles errors', async () => {\\n  const newTask: Omit<Task, 'id'> = {\\n    title: 'New Task',\\n    description: 'Description',\\n    dueDate: '2024-03-20'\\n  };\\n  (axios.post as jest.Mock).mockRejectedValue(new Error('Network error'));\\n  await expect(createTask(newTask)).rejects.toThrow('Network error');\\n});\"\n      },\n      \"utils\": {\n        \"dateUtils.test.ts\": \"import { formatDate } from './dateUtils';\\n\\ntest('formatDate formats date correctly', () => {\\n  const date = new Date('2024-03-15');\\n  const formattedDate = formatDate(date);\\n  expect(formattedDate).toBe('3/15/2024'); // Adjust expected format as needed\\n});\"\n      }\n    },\n    \"backend\": {\n      \"task-service\": {\n        \"tasks.test.js\": \"const request = require('supertest');\\nconst app = require('../app'); // Assuming you have an app.js file\\nconst Task = require('./models/Task');\\n\\ndescribe('Task API', () => {\\n  it('GET /tasks should return all tasks', async () => {\\n    const tasks = await Task.findAll();\\n    const res = await request(app).get('/tasks');\\n    expect(res.status).toBe(200);\\n    expect(res.body).toEqual(expect.arrayContaining(tasks));\\n  });\\n\\n  it('POST /tasks should create a new task', async () => {\\n    const newTaskData = {\\n      title: 'Test Task',\\n      description: 'This is a test task',\\n      dueDate: '2024-03-15'\\n    };\\n    const res = await request(app).post('/tasks').send(newTaskData);\\n    expect(res.status).toBe(201); // or 200 depending on your setup\\n    expect(res.body).toHaveProperty('id');\\n    expect(res.body.title).toBe(newTaskData.title);\\n  });\\n});\"\n      },\n      \"models\": {\n        \"Task.test.js\": \"// Test Task model interactions (e.g., using Sequelize's testing utilities)\"\n      }\n    }\n  },\n  \"integration_tests\": {\n    \"frontend_backend\": {\n      \"integration.test.ts\": \"// Tests that involve both frontend and backend.  These will likely use a test environment.\\n// Example: Test creating a task through frontend UI, and verifying it's created in the backend database.\"\n    }\n  },\n  \"performance_tests\": {\n    \"frontend\": {\n      \"performance.test.ts\": \"// Performance tests for frontend (e.g., using Lighthouse or other performance testing tools)\"\n    },\n    \"backend\": {\n      \"performance.test.js\": \"// Performance tests for backend (e.g., using load testing tools like k6 or Artillery)\"\n    }\n  },\n  \"test_utilities\": {\n    \"testUtils.ts\": \"// Utility functions for tests (e.g., helper functions to setup test data, mock API responses etc.)\\n\\nexport const mockTask = (id: string): Task => ({id, title: 'Mock Task', description: 'Mock Description', dueDate: '2024-03-15'});\"\n  }\n}\n```",
  "documentation_task": "```json\n{\n  \"api_docs\": {\n    \"/tasks\": {\n      \"GET\": {\n        \"description\": \"Retrieve all tasks.\",\n        \"response\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/components/schemas/Task\"\n              }\n            }\n          },\n          \"500\": {\n            \"description\": \"Internal Server Error\"\n          }\n        }\n      },\n      \"POST\": {\n        \"description\": \"Create a new task.\",\n        \"request\": {\n          \"schema\": {\n            \"$ref\": \"#/components/schemas/Task\"\n          }\n        },\n        \"response\": {\n          \"201\": {\n            \"description\": \"Task created successfully\",\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/Task\"\n            }\n          },\n          \"500\": {\n            \"description\": \"Internal Server Error\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"Task\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": { \"type\": \"string\" },\n          \"title\": { \"type\": \"string\" },\n          \"description\": { \"type\": \"string\" },\n          \"dueDate\": { \"type\": \"string\", \"format\": \"date\" },\n          \"priority\": { \"type\": \"string\", \"enum\": [\"high\", \"medium\", \"low\"] },\n          \"status\": { \"type\": \"string\", \"enum\": [\"open\", \"in progress\", \"completed\"] },\n          \"projectId\": { \"type\": \"string\" },\n          \"userId\": { \"type\": \"string\" }\n        },\n        \"required\": [\"title\", \"description\", \"dueDate\"]\n      }\n    }\n  },\n  \"architecture_docs\": \"The application follows a microservices architecture with a frontend (React), a backend (Node.js with Express.js), and a database (PostgreSQL).  The frontend communicates with the backend via REST APIs.  The backend consists of a task service, authentication service, and API gateway (Kong is used in example configuration).  Data models are defined using Sequelize ORM.  Redux is used for state management in the frontend.  The system is designed to allow for scalability and maintainability.\",\n  \"module_docs\": {\n    \"frontend\": {\n      \"components\": \"Contains reusable React components for displaying tasks and interacting with the UI.  `TaskComponent.tsx` renders individual tasks.\",\n      \"services\": \"Handles communication with the backend APIs.  `TaskService.ts` provides functions to fetch and create tasks.\",\n      \"store\": \"Manages application state using Redux.  `store.ts` configures the Redux store.\",\n      \"utils\": \"Contains utility functions.  `dateUtils.ts` provides date formatting functionality.\"\n    },\n    \"backend\": {\n      \"task-service\": \"Handles task-related business logic and database interactions using Express.js and Sequelize. `tasks.js` defines the API routes.\",\n      \"models\": \"Defines Sequelize models for database interaction. `Task.js` defines the Task model.\",\n      \"api-gateway\": \"Manages API routing and traffic management (Kong is used in the example).\",\n      \"auth-service\": \"Handles user authentication and authorization.\",\n      \"database\": \"Connects to the PostgreSQL database and provides database connection pool.\"\n    }\n  },\n  \"integration_docs\": {\n    \"frontend_to_backend\": \"The frontend interacts with the backend through RESTful APIs.  The `TaskService.ts` file in the frontend defines the API calls for fetching and creating tasks.  Error handling is implemented in both frontend and backend.\",\n    \"microservices_communication\": \"If additional microservices were implemented (e.g., user service, project service), communication could be achieved via message queues like Kafka or using inter-service REST calls. This would involve setting up topics, producers, and consumers.  This example doesn't implement additional services.\",\n    \"database\": \"Backend services interact with the PostgreSQL database through the Sequelize ORM. The database schema is defined in the Sequelize models (e.g., `Task.js`).  Each service has its own connection to the database.\"\n  },\n  \"performance_guidelines\": {\n    \"frontend\": \"Optimize images, minimize HTTP requests, leverage lazy loading, use efficient JavaScript libraries, and consider using a CDN for static assets. Regularly run performance tests (e.g., using Lighthouse) to identify and fix performance bottlenecks.\",\n    \"backend\": \"Optimize database queries, implement caching, use efficient code, and leverage load balancing if necessary. Use appropriate server-side technologies and configurations. Monitor server resources to identify performance issues. Regularly run load tests (e.g., using k6 or Artillery) to evaluate system performance under load.\"\n  }\n}\n```"
}