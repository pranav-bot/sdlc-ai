domain: "Real-time ASCII 3-D Graphics Engine"
objective: >
  Design and implement a real-time ASCII 3-D graphics engine using pygame that renders 3D objects using ASCII art.
  The system should include the following capabilities:
    - A robust 3D rendering core that projects 3D coordinates into 2D ASCII representations.
    - A real-time rendering loop that updates the ASCII output continuously.
    - User input handling (keyboard and/or mouse) to control camera movements and interactions.
    - Pygame integration to open and manage a GUI window, while the actual graphics are rendered in ASCII.
    - Optimized performance strategies to ensure smooth, real-time display of complex 3D scenes.

    You are tasked with generating comprehensive development artifacts for the above project. Please perform the following steps:

  1. **Requirements Analysis and Flowchart Generation:**
     - Analyze the objective and identify the core functionalities required for a real-time ASCII 3-D graphics engine.
     - Extract key features such as the 3D rendering engine, real-time update loop, user input handling, and Pygame integration.
     - Generate a detailed plain-text flowchart that outlines the overall system development flow, covering data acquisition, 3D computations, ASCII rendering, and display updates.
     - Format your output as a JSON object with a key `"flowchart"` mapping to the plain-text diagram.

  2. **Component Diagram Creation:**
     - Based on the requirements and flowchart, generate a comprehensive plain-text component diagram.
     - Clearly define system modules including:
         - The **Input Module** for capturing user interactions.
         - The **3D Engine Core** responsible for computations, projections, and depth mapping.
         - The **Rendering Module** that converts 3D data to ASCII art.
         - The **GUI Module** that leverages Pygame to display the output and manage events.
         - Any supporting utility classes (e.g., for performance monitoring or configuration).
     - Format your output as a JSON object with a key `"component_diagram"` mapping to the diagram details.

  3. **Structured Blueprint of System Components:**
     - Produce a structured JSON blueprint detailing each system component, its functionality, and interconnections.
     - Ensure that the blueprint includes descriptions of how data flows between modules, and specify any key methods or interfaces.
     - Format your output as a JSON object with a key `"structured_components"` mapping to this blueprint.

  4. **High-Level Code Skeleton Generation:**
     - Generate a high-level code skeleton outlining the main modules, classes, and functions needed to implement the system.
     - Include file/module recommendations, class definitions (e.g., Renderer, InputHandler, EngineCore, PygameGUI), and brief inline comments explaining each componentâ€™s purpose.
     - Format your output as a JSON object with a key `"code_skeleton"` mapping to the plain-text code skeleton.
  
  Each output must be a modular, scalable, and maintainable artifact that adheres to modern software engineering best practices. Return ONLY JSON objects with the specified keys, without any additional text.

tech_stack: "pygame, ascii"
agents: "1,2,3"
